<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>References on SnowFox</title>
    <link>https://arcticnature.github.io/references/</link>
    <description>Recent content in References on SnowFox</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <copyright>Copyright (c) 2015, Stefano Pogliani</copyright>
    <lastBuildDate>Mon, 23 May 2016 22:06:59 +0100</lastBuildDate>
    <atom:link href="https://arcticnature.github.io/references/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>LUA client API</title>
      <link>https://arcticnature.github.io/references/lua/client/</link>
      <pubDate>Mon, 23 May 2016 22:06:59 +0100</pubDate>
      
      <guid>https://arcticnature.github.io/references/lua/client/</guid>
      <description>

&lt;p&gt;LUA interfaces available in the &lt;code&gt;snow-fox-client&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;global-names:4bd4f30263398a45e38fc9edfc648efa&#34;&gt;Global names&lt;/h2&gt;

&lt;p&gt;The following names are available in the global scope.&lt;/p&gt;

&lt;h3 id=&#34;clear:4bd4f30263398a45e38fc9edfc648efa&#34;&gt;&lt;code&gt;clear()&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Clears the terminal window and show the promp on the top line.&lt;/p&gt;

&lt;h3 id=&#34;pprint-value:4bd4f30263398a45e38fc9edfc648efa&#34;&gt;&lt;code&gt;pprint(value)&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Prints the &lt;code&gt;value&lt;/code&gt; argument.
If &lt;code&gt;value&lt;/code&gt; is a LUA table, &lt;code&gt;pprint&lt;/code&gt; recursively prints the keys
and their values.&lt;/p&gt;

&lt;h3 id=&#34;print:4bd4f30263398a45e38fc9edfc648efa&#34;&gt;&lt;code&gt;print(...)&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Prints the given arguments, separating them with a &lt;code&gt;\t&lt;/code&gt; (TAB).&lt;/p&gt;

&lt;h2 id=&#34;the-client-object:4bd4f30263398a45e38fc9edfc648efa&#34;&gt;The &lt;code&gt;client&lt;/code&gt; object&lt;/h2&gt;

&lt;p&gt;Commands that interact with the client are availale through the
&lt;code&gt;client&lt;/code&gt; global object.&lt;/p&gt;

&lt;h3 id=&#34;client-exit:4bd4f30263398a45e38fc9edfc648efa&#34;&gt;&lt;code&gt;client:exit()&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Causes the client to exit cleanly.&lt;/p&gt;

&lt;h3 id=&#34;client-version:4bd4f30263398a45e38fc9edfc648efa&#34;&gt;&lt;code&gt;client:version()&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Returns a LUA table with the client version information.
The table has the following fields:&lt;/p&gt;

&lt;div class=&#34;mdtable table-striped&#34;&gt;
  &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Field&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Decription&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;Client&amp;rsquo;s SemVer&lt;/td&gt;
&lt;td&gt;&lt;code&gt;0.0.3&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;hash&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;Git hash&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ece936dd1f349fd9d0b31dbb9098cb204e5e8ff5&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;taint&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;Git state at build time&lt;/td&gt;
&lt;td&gt;&lt;code&gt;git index tainted&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;/div&gt;


&lt;h2 id=&#34;the-node-object:4bd4f30263398a45e38fc9edfc648efa&#34;&gt;The &lt;code&gt;node&lt;/code&gt; object&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;snow-fox-client&lt;/code&gt; connects to a &lt;code&gt;snow-fox&lt;/code&gt; node at start time.
The &lt;code&gt;node&lt;/code&gt; global object allows to interact with the specific node
connected at start up.&lt;/p&gt;

&lt;h3 id=&#34;node-status-callback-details:4bd4f30263398a45e38fc9edfc648efa&#34;&gt;&lt;code&gt;node:status(callback[, details])&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Requests the status of the node.&lt;/p&gt;

&lt;p&gt;When the node returns the status information, the &lt;code&gt;callback&lt;/code&gt; is invoked
with the result converted into a LUA table.&lt;/p&gt;

&lt;p&gt;If the optional &lt;code&gt;details&lt;/code&gt; argument is set to &lt;code&gt;true&lt;/code&gt; (defaults to &lt;code&gt;false&lt;/code&gt;)
then the node includes detailed information about itself.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Event based system</title>
      <link>https://arcticnature.github.io/references/advanced/events/</link>
      <pubDate>Tue, 17 May 2016 20:47:54 +0100</pubDate>
      
      <guid>https://arcticnature.github.io/references/advanced/events/</guid>
      <description>

&lt;p&gt;SnowFox is an event based system.
&lt;code&gt;Event&lt;/code&gt;s are created by different &lt;code&gt;EventSource&lt;/code&gt;s.&lt;br /&gt;
Each &lt;code&gt;snow-fox-*&lt;/code&gt; process configures an &lt;code&gt;EventSourceManager&lt;/code&gt; and the
relevant &lt;code&gt;EventSource&lt;/code&gt;s and enters the event loop.&lt;/p&gt;

&lt;p&gt;This page descrives the events interface and semantics:&lt;/p&gt;

&lt;h2 id=&#34;event-s-interface:cfe6bfb85feb4e5f1baa942dee8755c2&#34;&gt;&lt;code&gt;Event&lt;/code&gt;s interface&lt;/h2&gt;

&lt;p&gt;Events:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Are subclasses of the &lt;code&gt;sf::core::model::Event&lt;/code&gt; abstract class.&lt;/li&gt;
&lt;li&gt;Define an handling process (&lt;code&gt;handle&lt;/code&gt; method).&lt;/li&gt;
&lt;li&gt;Can optionally cope with its own failures (&lt;code&gt;rescue&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;Event&lt;/code&gt; interface is defined in
&lt;a href=&#34;https://github.com/ArcticNature/core/blob/master/model/event/include/core/model/event.h&#34;&gt;https://github.com/ArcticNature/core/blob/master/model/event/include/core/model/event.h&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;sharing-state:cfe6bfb85feb4e5f1baa942dee8755c2&#34;&gt;Sharing state&lt;/h2&gt;

&lt;p&gt;Events can be given parameters when they are created by the event source
that creates them but they cannot otherwise interact with future events.&lt;/p&gt;

&lt;p&gt;This means that an event generated as a response to another event cannot
access the context in which the original event was created.&lt;/p&gt;

&lt;p&gt;For example, the &lt;code&gt;snow-fox-client&lt;/code&gt; provides the &lt;code&gt;node.status()&lt;/code&gt; method.
Here is what happens when the user calls this method:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The client returns a pending response to the user.&lt;/li&gt;
&lt;li&gt;The client sends a request to the SnowFox node serving it.&lt;/li&gt;
&lt;li&gt;The node processes the request and determines the state.&lt;/li&gt;
&lt;li&gt;The node sends the state back to the client.&lt;/li&gt;
&lt;li&gt;The client processes the response and resolves the pending response.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But how does the client know which pending response to resolve?
While &lt;code&gt;Event&lt;/code&gt; instances represent independent events across the system,
they are related to one another as they aim to acomplish the same goal.&lt;/p&gt;

&lt;p&gt;Events that relate to one another share the same &lt;code&gt;correlation_id&lt;/code&gt;.
When the client receives a status response, it can use the &lt;code&gt;correlation_id&lt;/code&gt;
to figure out which past event triggered the request.&lt;/p&gt;

&lt;p&gt;But that on its own is still not enough to store context.
The &lt;code&gt;sf::core::model::EventContext&lt;/code&gt; template is here to do the rest.
Concrete &lt;code&gt;EventContext&lt;/code&gt;s are maps from &lt;code&gt;correlation_id&lt;/code&gt;s to contexts.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Client Lifecycle</title>
      <link>https://arcticnature.github.io/references/lifecycles/cli/</link>
      <pubDate>Sun, 15 May 2016 12:39:44 +0100</pubDate>
      
      <guid>https://arcticnature.github.io/references/lifecycles/cli/</guid>
      <description>

&lt;p&gt;SnowFox client lifecycle events.&lt;/p&gt;

&lt;h2 id=&#34;client-lua-init:b659b046131d4024ab5e2d3675716bf0&#34;&gt;&lt;code&gt;client::lua::init&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Called when the LUA environment for the client is initialised.
The environment is available in &lt;code&gt;sf::core::context::Client::lua()&lt;/code&gt;
for handlers to manipulate.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>snow-fox-client</title>
      <link>https://arcticnature.github.io/references/cli/client/</link>
      <pubDate>Mon, 11 Apr 2016 22:39:59 +0100</pubDate>
      
      <guid>https://arcticnature.github.io/references/cli/client/</guid>
      <description>

&lt;p&gt;The official command line client.
Used to interact with the SnowFox server.&lt;/p&gt;




&lt;h2 id=&#34;other:4bd4f30263398a45e38fc9edfc648efa&#34;&gt;Other&lt;/h2&gt;

&lt;p&gt;Miscellaneous options.&lt;/p&gt;

&lt;h3 id=&#34;help-show-available-options:4bd4f30263398a45e38fc9edfc648efa&#34;&gt;&lt;code&gt;--help&lt;/code&gt;: show available options&lt;/h3&gt;

&lt;p&gt;Print the list of available options and parameters and exits.&lt;/p&gt;

&lt;h3 id=&#34;version-show-version-and-exit:4bd4f30263398a45e38fc9edfc648efa&#34;&gt;&lt;code&gt;--Version&lt;/code&gt;: show version and exit&lt;/h3&gt;

&lt;p&gt;Print the version of the binary and exits.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Node status codes</title>
      <link>https://arcticnature.github.io/references/advanced/status/system/</link>
      <pubDate>Sat, 09 Apr 2016 22:48:34 +0100</pubDate>
      
      <guid>https://arcticnature.github.io/references/advanced/status/system/</guid>
      <description>

&lt;p&gt;This is a list of node status codes.&lt;/p&gt;

&lt;h3 id=&#34;unkown:fc01508acb380bfa5567c9fccdfa05e8&#34;&gt;&lt;code&gt;UNKOWN&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The state of the node could not be fully determined.&lt;/p&gt;

&lt;h3 id=&#34;ok:fc01508acb380bfa5567c9fccdfa05e8&#34;&gt;&lt;code&gt;OK&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The node is up and running!&lt;/p&gt;

&lt;h3 id=&#34;process-ready:fc01508acb380bfa5567c9fccdfa05e8&#34;&gt;&lt;code&gt;PROCESS_READY&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The initialisation of the process hosting the node is complete.&lt;/p&gt;

&lt;h3 id=&#34;warning:fc01508acb380bfa5567c9fccdfa05e8&#34;&gt;&lt;code&gt;WARNING&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Something is not as desired.&lt;/p&gt;

&lt;h3 id=&#34;process-starting:fc01508acb380bfa5567c9fccdfa05e8&#34;&gt;&lt;code&gt;PROCESS_STARTING&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The process hosting the node is starting up.&lt;/p&gt;

&lt;h3 id=&#34;error:fc01508acb380bfa5567c9fccdfa05e8&#34;&gt;&lt;code&gt;ERROR&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The node is in error state.&lt;/p&gt;

&lt;h3 id=&#34;end:fc01508acb380bfa5567c9fccdfa05e8&#34;&gt;&lt;code&gt;END&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Placeholder for the last valid node status code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Representing status</title>
      <link>https://arcticnature.github.io/references/advanced/status/</link>
      <pubDate>Sat, 09 Apr 2016 09:38:16 +0100</pubDate>
      
      <guid>https://arcticnature.github.io/references/advanced/status/</guid>
      <description>&lt;p&gt;SnowFox keeps track not only of itself but also the services it
runs, depends on, or other items defined by extensions.
To avoid users/admins insanity, all these status information is
presented in a consistent way.&lt;/p&gt;

&lt;p&gt;Status information is formed of two bits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Traffic light overview:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Red: the unit is confirmed to be in an undesired state
(failed process, invalid configuration, &amp;hellip;).&lt;/li&gt;
&lt;li&gt;Yellow: the unit is not in the desired state but that may not
be an issue (system starting, configuration loading, &amp;hellip;).&lt;/li&gt;
&lt;li&gt;Green: the unit is in the desired state.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Status details:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An exact status code for the unit.&lt;/li&gt;
&lt;li&gt;A human readable message with the reason for the status.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This format allows to quickly check the overall system and to derive
aggregate status overviews while keeping the details needed to react
to issue in the system itself.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Event Lifecycle</title>
      <link>https://arcticnature.github.io/references/lifecycles/event/</link>
      <pubDate>Sun, 03 Apr 2016 10:36:08 +0100</pubDate>
      
      <guid>https://arcticnature.github.io/references/lifecycles/event/</guid>
      <description>

&lt;p&gt;Extend and customise events as they move across SnowFox.&lt;/p&gt;




&lt;h2 id=&#34;eventlifecyclearg:8f53f2c628bc43b6db30a5e661b5da6b&#34;&gt;&lt;code&gt;EventLifecycleArg&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;EventLifecycleArg&lt;/code&gt; is a &lt;code&gt;BaseLifecycleArg&lt;/code&gt; that stores
a reference to an &lt;code&gt;Event&lt;/code&gt; instance.
It is passed to &lt;code&gt;event::*&lt;/code&gt; lifecycle events that require an
&lt;code&gt;Event&lt;/code&gt; instance to operate on.&lt;/p&gt;

&lt;h2 id=&#34;event-identify:8f53f2c628bc43b6db30a5e661b5da6b&#34;&gt;&lt;code&gt;event::_identify&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;A special step in the lifecycle of an event that is triggered
just after an event is created but before the &lt;code&gt;event::initialise&lt;/code&gt;
step.&lt;/p&gt;

&lt;p&gt;This step generates the id (and possibly the correlation id) of an
&lt;code&gt;Event&lt;/code&gt; instance.
The &lt;code&gt;Event&lt;/code&gt; reference to operate on is passed to the handler in an
&lt;code&gt;EventLifecycleArg&lt;/code&gt; instance.&lt;/p&gt;

&lt;p&gt;Every component that instantiates an object should use the
&lt;code&gt;sf::core::lifecycle::EventLifecycle::Init&lt;/code&gt; method to ensure the
event is initialised correctly.&lt;/p&gt;

&lt;h2 id=&#34;event-initialise:8f53f2c628bc43b6db30a5e661b5da6b&#34;&gt;&lt;code&gt;event::initialise&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;This step is triggered when an &lt;code&gt;Event&lt;/code&gt; is initialised and identified.
The &lt;code&gt;Event&lt;/code&gt; reference to operate on is passed to the handler in an
&lt;code&gt;EventLifecycleArg&lt;/code&gt; instance.&lt;/p&gt;

&lt;p&gt;Every component that instantiates an object should use the
&lt;code&gt;sf::core::lifecycle::Event::Initialise&lt;/code&gt; method to ensure the
event is initialised correctly.&lt;/p&gt;



</description>
    </item>
    
    <item>
      <title>Process Lifecycle</title>
      <link>https://arcticnature.github.io/references/lifecycles/process/</link>
      <pubDate>Sun, 03 Apr 2016 10:34:39 +0100</pubDate>
      
      <guid>https://arcticnature.github.io/references/lifecycles/process/</guid>
      <description>

&lt;p&gt;React to the running process evolution and events.&lt;/p&gt;

&lt;h2 id=&#34;process-init:a0551a02a524ed27c27781d2fca7bf97&#34;&gt;&lt;code&gt;process::init&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Triggered when the process is started.
Used primarily by modules to initialise or register features with the system.&lt;/p&gt;

&lt;h3 id=&#34;registering-an-handler:a0551a02a524ed27c27781d2fca7bf97&#34;&gt;Registering an handler&lt;/h3&gt;

&lt;p&gt;Registering a &lt;code&gt;process::init&lt;/code&gt; handler is a special task because the
registration must occur during static initialisation, a phase where
the initialisation order is &amp;hellip; fuzzy.&lt;/p&gt;

&lt;p&gt;To help with that the &lt;code&gt;sf::core::lifecycle::Process::Initialiser&lt;/code&gt;
template can be used to register the &lt;code&gt;process::init&lt;/code&gt; handler.
In one of the component&amp;rsquo;s source files, add the following code:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;core&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;interface&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BaseLifecycleHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;core&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;interface&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BaseLifecycleArg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;core&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lifecycle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MyModuleInitialiser&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BaseLifecycleHandler&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
 &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;handle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BaseLifecycleArg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Initialisation code here ...&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Process&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Initialiser&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MyModuleInitialiser&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;my_module_initialiser&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;div class=&#34;alert alert-danger&#34; role=&#34;alert&#34;&gt;
  &lt;p&gt;Keep in mind that static order initialisation is non-deterministic.
As such,
&lt;strong&gt;it is not possible to know in which order &lt;code&gt;process::init&lt;/code&gt; handlers run&lt;/strong&gt;!&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;process-exit:a0551a02a524ed27c27781d2fca7bf97&#34;&gt;&lt;code&gt;process::exit&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Triggered when the SnowFox process is terminated.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Lifecycles Reference</title>
      <link>https://arcticnature.github.io/references/lifecycles/</link>
      <pubDate>Sun, 03 Apr 2016 10:24:12 +0100</pubDate>
      
      <guid>https://arcticnature.github.io/references/lifecycles/</guid>
      <description>

&lt;p&gt;Part of the flexibility and extensibility of SnowFox comes from Lifecycles.
Lifecycles are a way to react to internal system events and decouple
handing of actions.
The component system also relies on Lifecycles to dynamically inject features
and alternative implementations.&lt;/p&gt;

&lt;p&gt;Lifecycles revolve around the &lt;code&gt;sf::core::interface::Lifecycle&lt;/code&gt; class,
which behaves in a similar manner to Node.js event emitter.&lt;/p&gt;

&lt;p&gt;All events are registered and triggered on the same &lt;code&gt;Lifecycle&lt;/code&gt;
singleton instance throughout the system.
Name spaces in the event name are used to avoid conflicts with context.&lt;/p&gt;

&lt;h2 id=&#34;lifecycle-api:ea9a84cb720f148d146016790d2d2fdd&#34;&gt;Lifecycle API&lt;/h2&gt;

&lt;p&gt;Interactions with the Lifecycles system can be divided into two:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Event handling: the side that reacts to changes in the system.&lt;/li&gt;
&lt;li&gt;Event triggering: the side that informs lifecycles of a change.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Checkout the Lifecycle interface in the source code at
&lt;a href=&#34;https://github.com/ArcticNature/core/blob/master/interface/lifecycle/include/core/interface/lifecycle.h&#34;&gt;https://github.com/ArcticNature/core/blob/master/interface/lifecycle/include/core/interface/lifecycle.h&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;example-acting-at-process-initialisation:ea9a84cb720f148d146016790d2d2fdd&#34;&gt;Example: acting at process initialisation&lt;/h3&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//! Example of Lifecycle event handler.&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ExampeInitHandler&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BaseLifecycleHandler&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
 &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;handle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BaseLifecycleArg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Some code that needs to run when the process starts.&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;


&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// Register the handler.&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;LifecycleHandlerRef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;handler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ExampeInitHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;Lifecycle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;process::init&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;handler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// Some init logic ...&lt;/span&gt;

  &lt;span class=&#34;c1&#34;&gt;// Trigger the `process::init` event.&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;Lifecycle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;trigger&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;process::init&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;list-of-official-lifecycles:ea9a84cb720f148d146016790d2d2fdd&#34;&gt;List of official Lifecycles&lt;/h2&gt;

&lt;p&gt;Events are nothing more then strings that identify a list of handlers.
Lifecycles are a sequence of these events triggered by the system.
There is no formal checking or definition of lifecycles.&lt;/p&gt;

&lt;p&gt;While the system (and components in it) can create their own lifecycles,
this section of the reference pages describes the lifecycles
part of the core components of SnowFox.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Daemon/Manager Messages Reference</title>
      <link>https://arcticnature.github.io/references/protobuf/dm/messages/</link>
      <pubDate>Fri, 01 Apr 2016 23:28:11 +0100</pubDate>
      
      <guid>https://arcticnature.github.io/references/protobuf/dm/messages/</guid>
      <description>

&lt;p&gt;Below is the list of messages exchanged between the Daemon and the Manager:&lt;/p&gt;

&lt;h2 id=&#34;message-code:db98506c886bce6a1312f949ef4ed854&#34;&gt;&lt;code&gt;Message::Code&lt;/code&gt;&lt;/h2&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-proto&#34; data-lang=&#34;proto&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;sf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;core.protocol.daemon_manager&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Code&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;na&#34;&gt;Ack&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;na&#34;&gt;Shutdown&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;div class=&#34;mdtable table-striped&#34;&gt;
  &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Ack&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;This message is an acknowledgement of a request&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Shutdown&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Request the manager process to shutdown&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Daemon/Manager Protocol Reference</title>
      <link>https://arcticnature.github.io/references/protobuf/dm/protocol/</link>
      <pubDate>Fri, 01 Apr 2016 23:28:11 +0100</pubDate>
      
      <guid>https://arcticnature.github.io/references/protobuf/dm/protocol/</guid>
      <description>

&lt;h2 id=&#34;system-shutdown:7327496955357b9792bab8720dc507d6&#34;&gt;System Shutdown&lt;/h2&gt;

&lt;p&gt;The system shutdown can be initiated from the daemon by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A user&amp;rsquo;s sending &lt;code&gt;SIGTERM&lt;/code&gt; to the daemon.&lt;/li&gt;
&lt;li&gt;The manager subprocess terminating.&lt;/li&gt;
&lt;li&gt;The spawner subprocess terminating.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In any of the above cases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The daemon sends a &lt;code&gt;Message&lt;/code&gt; with code &lt;code&gt;Message::Code::Shutdown&lt;/code&gt;
to the manager, if it is not dead.&lt;/li&gt;
&lt;li&gt;The manager performs the shutdown actions and terminates.&lt;/li&gt;
&lt;li&gt;The daemon detects that the manager terminated.&lt;/li&gt;
&lt;li&gt;The daemon sends a &lt;code&gt;Message&lt;/code&gt; with code &lt;code&gt;Message::Code::Shutdown&lt;/code&gt;
to the spawner, if it is not dead.&lt;/li&gt;
&lt;li&gt;The spawner performs the shutdown actions and terminates.&lt;/li&gt;
&lt;li&gt;The daemon terminates.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Daemon/Spawner Messages Reference</title>
      <link>https://arcticnature.github.io/references/protobuf/ds/messages/</link>
      <pubDate>Fri, 01 Apr 2016 23:28:11 +0100</pubDate>
      
      <guid>https://arcticnature.github.io/references/protobuf/ds/messages/</guid>
      <description>

&lt;p&gt;Below is the list of messages exchanged between the Daemon and the Spawner:&lt;/p&gt;

&lt;h2 id=&#34;message-code:db98506c886bce6a1312f949ef4ed854&#34;&gt;&lt;code&gt;Message::Code&lt;/code&gt;&lt;/h2&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-proto&#34; data-lang=&#34;proto&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;sf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;core.protocol.daemon_spanwer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Code&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;na&#34;&gt;Ack&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;na&#34;&gt;Shutdown&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;div class=&#34;mdtable table-striped&#34;&gt;
  &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Ack&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;This message is an acknowledgement of a request&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Shutdown&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Request the spawner process to shutdown&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Daemon/Spawner Protocol Reference</title>
      <link>https://arcticnature.github.io/references/protobuf/ds/protocol/</link>
      <pubDate>Fri, 01 Apr 2016 23:28:11 +0100</pubDate>
      
      <guid>https://arcticnature.github.io/references/protobuf/ds/protocol/</guid>
      <description>

&lt;h2 id=&#34;system-shutdown:7327496955357b9792bab8720dc507d6&#34;&gt;System Shutdown&lt;/h2&gt;

&lt;p&gt;The system shutdown can be initiated from the daemon by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A user&amp;rsquo;s sending &lt;code&gt;SIGTERM&lt;/code&gt; to the daemon.&lt;/li&gt;
&lt;li&gt;The manager subprocess terminating.&lt;/li&gt;
&lt;li&gt;The spawner subprocess terminating.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In any of the above cases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The daemon sends a &lt;code&gt;Message&lt;/code&gt; with code &lt;code&gt;Message::Code::Shutdown&lt;/code&gt;
to the manager, if it is not dead.&lt;/li&gt;
&lt;li&gt;The manager performs the shutdown actions and terminates.&lt;/li&gt;
&lt;li&gt;The daemon detects that the manager terminated.&lt;/li&gt;
&lt;li&gt;The daemon sends a &lt;code&gt;Message&lt;/code&gt; with code &lt;code&gt;Message::Code::Shutdown&lt;/code&gt;
to the spawner, if it is not dead.&lt;/li&gt;
&lt;li&gt;The spawner performs the shutdown actions and terminates.&lt;/li&gt;
&lt;li&gt;The daemon terminates.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Manager/Spawner Messages Reference</title>
      <link>https://arcticnature.github.io/references/protobuf/ms/messages/</link>
      <pubDate>Fri, 01 Apr 2016 23:28:11 +0100</pubDate>
      
      <guid>https://arcticnature.github.io/references/protobuf/ms/messages/</guid>
      <description>

&lt;p&gt;Below is the list of messages exchanged between the Manager and the Spawner:&lt;/p&gt;

&lt;h2 id=&#34;message-code:db98506c886bce6a1312f949ef4ed854&#34;&gt;&lt;code&gt;Message::Code&lt;/code&gt;&lt;/h2&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-proto&#34; data-lang=&#34;proto&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;sf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;core.protocol.manager_spawner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Code&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;na&#34;&gt;Ack&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;div class=&#34;mdtable table-striped&#34;&gt;
  &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Ack&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;This message is an acknowledgement of a request&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Manager/Spawner Protocol Reference</title>
      <link>https://arcticnature.github.io/references/protobuf/ms/protocol/</link>
      <pubDate>Fri, 01 Apr 2016 23:28:11 +0100</pubDate>
      
      <guid>https://arcticnature.github.io/references/protobuf/ms/protocol/</guid>
      <description>

&lt;h2 id=&#34;log-request:7327496955357b9792bab8720dc507d6&#34;&gt;Log request&lt;/h2&gt;

&lt;p&gt;When the spawner needs to log something it sends a &lt;code&gt;LogMessage&lt;/code&gt;
to the Manager.
There is no response to this message.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>