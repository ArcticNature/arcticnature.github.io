<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lifecycle on SnowFox</title>
    <link>https://arcticnature.github.io/references/lifecycle/</link>
    <description>Recent content in Lifecycle on SnowFox</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <copyright>Copyright (c) 2015, Stefano Pogliani</copyright>
    <lastBuildDate>Sun, 03 Apr 2016 10:34:39 +0100</lastBuildDate>
    <atom:link href="https://arcticnature.github.io/references/lifecycle/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Process Lifecycle</title>
      <link>https://arcticnature.github.io/references/lifecycles/process/</link>
      <pubDate>Sun, 03 Apr 2016 10:34:39 +0100</pubDate>
      
      <guid>https://arcticnature.github.io/references/lifecycles/process/</guid>
      <description>

&lt;p&gt;React to the running process evolution and events.&lt;/p&gt;

&lt;h2 id=&#34;process-init:a0551a02a524ed27c27781d2fca7bf97&#34;&gt;&lt;code&gt;process::init&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Triggered when the process is started.
Used primarily by modules to initialise or register features with the system.&lt;/p&gt;

&lt;h3 id=&#34;registering-an-handler:a0551a02a524ed27c27781d2fca7bf97&#34;&gt;Registering an handler&lt;/h3&gt;

&lt;p&gt;Registering a &lt;code&gt;process::init&lt;/code&gt; handler is a special task because the
registration must occur during static initialisation, a phase where
the initialisation order is &amp;hellip; fuzzy.&lt;/p&gt;

&lt;p&gt;To help with that the &lt;code&gt;sf::core::lifecycle::Process::Initialiser&lt;/code&gt;
template can be used to register the &lt;code&gt;process::init&lt;/code&gt; handler.
In one of the component&amp;rsquo;s source files, add the following code:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;core&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;interface&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BaseLifecycleHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;core&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;interface&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BaseLifecycleArg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;core&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lifecycle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MyModuleInitialiser&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BaseLifecycleHandler&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
 &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;handle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BaseLifecycleArg&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Initialisation code here ...&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;Process&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Initialiser&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MyModuleInitialiser&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;my_module_initialiser&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;div class=&#34;alert alert-danger&#34; role=&#34;alert&#34;&gt;
  &lt;p&gt;Keep in mind that static order initialisation is non-deterministic.
As such,
&lt;strong&gt;it is not possible to know in which order &lt;code&gt;process::init&lt;/code&gt; handlers run&lt;/strong&gt;!&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;process-exit:a0551a02a524ed27c27781d2fca7bf97&#34;&gt;&lt;code&gt;process::exit&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Triggered when the SnowFox process is terminated.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Event Lifecycle</title>
      <link>https://arcticnature.github.io/references/lifecycles/event/</link>
      <pubDate>Sun, 03 Apr 2016 10:36:08 +0100</pubDate>
      
      <guid>https://arcticnature.github.io/references/lifecycles/event/</guid>
      <description>

&lt;p&gt;Extend and customise events as they move across SnowFox.&lt;/p&gt;




&lt;h2 id=&#34;eventlifecyclearg:8f53f2c628bc43b6db30a5e661b5da6b&#34;&gt;&lt;code&gt;EventLifecycleArg&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;EventLifecycleArg&lt;/code&gt; is a &lt;code&gt;BaseLifecycleArg&lt;/code&gt; that stores
a reference to an &lt;code&gt;Event&lt;/code&gt; instance.
It is passed to &lt;code&gt;event::*&lt;/code&gt; lifecycle events that require an
&lt;code&gt;Event&lt;/code&gt; instance to operate on.&lt;/p&gt;

&lt;h2 id=&#34;event-identify:8f53f2c628bc43b6db30a5e661b5da6b&#34;&gt;&lt;code&gt;event::_identify&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;A special step in the lifecycle of an event that is triggered
just after an event is created but before the &lt;code&gt;event::initialise&lt;/code&gt;
step.&lt;/p&gt;

&lt;p&gt;This step generates the id (and possibly the correlation id) of an
&lt;code&gt;Event&lt;/code&gt; instance.
The &lt;code&gt;Event&lt;/code&gt; reference to operate on is passed to the handler in an
&lt;code&gt;EventLifecycleArg&lt;/code&gt; instance.&lt;/p&gt;

&lt;p&gt;Every component that instantiates an object should use the
&lt;code&gt;sf::core::lifecycle::EventLifecycle::Init&lt;/code&gt; method to ensure the
event is initialised correctly.&lt;/p&gt;

&lt;h2 id=&#34;event-initialise:8f53f2c628bc43b6db30a5e661b5da6b&#34;&gt;&lt;code&gt;event::initialise&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;This step is triggered when an &lt;code&gt;Event&lt;/code&gt; is initialised and identified.
The &lt;code&gt;Event&lt;/code&gt; reference to operate on is passed to the handler in an
&lt;code&gt;EventLifecycleArg&lt;/code&gt; instance.&lt;/p&gt;

&lt;p&gt;Every component that instantiates an object should use the
&lt;code&gt;sf::core::lifecycle::Event::Initialise&lt;/code&gt; method to ensure the
event is initialised correctly.&lt;/p&gt;



</description>
    </item>
    
    <item>
      <title>Client Lifecycle</title>
      <link>https://arcticnature.github.io/references/lifecycles/cli/</link>
      <pubDate>Sun, 15 May 2016 12:39:44 +0100</pubDate>
      
      <guid>https://arcticnature.github.io/references/lifecycles/cli/</guid>
      <description>

&lt;p&gt;SnowFox client lifecycle events.&lt;/p&gt;

&lt;h2 id=&#34;client-lua-init:b659b046131d4024ab5e2d3675716bf0&#34;&gt;&lt;code&gt;client::lua::init&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Called when the LUA environment for the client is initialised.
The environment is available in &lt;code&gt;sf::core::context::Client::lua()&lt;/code&gt;
for handlers to manipulate.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>