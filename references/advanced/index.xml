<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Advanced on SnowFox</title>
    <link>https://arcticnature.github.io/references/advanced/</link>
    <description>Recent content in Advanced on SnowFox</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <copyright>Copyright (c) 2015, Stefano Pogliani</copyright>
    <lastBuildDate>Tue, 17 May 2016 20:47:54 +0100</lastBuildDate>
    <atom:link href="https://arcticnature.github.io/references/advanced/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Event based system</title>
      <link>https://arcticnature.github.io/references/advanced/events/</link>
      <pubDate>Tue, 17 May 2016 20:47:54 +0100</pubDate>
      
      <guid>https://arcticnature.github.io/references/advanced/events/</guid>
      <description>

&lt;p&gt;SnowFox is an event based system.
&lt;code&gt;Event&lt;/code&gt;s are created by different &lt;code&gt;EventSource&lt;/code&gt;s.&lt;br /&gt;
Each &lt;code&gt;snow-fox-*&lt;/code&gt; process configures an &lt;code&gt;EventSourceManager&lt;/code&gt; and the
relevant &lt;code&gt;EventSource&lt;/code&gt;s and enters the event loop.&lt;/p&gt;

&lt;p&gt;This page descrives the events interface and semantics:&lt;/p&gt;

&lt;h2 id=&#34;event-s-interface&#34;&gt;&lt;code&gt;Event&lt;/code&gt;s interface&lt;/h2&gt;

&lt;p&gt;Events:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Are subclasses of the &lt;code&gt;sf::core::model::Event&lt;/code&gt; abstract class.&lt;/li&gt;
&lt;li&gt;Define an handling process (&lt;code&gt;handle&lt;/code&gt; method).&lt;/li&gt;
&lt;li&gt;Can optionally cope with its own failures (&lt;code&gt;rescue&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;Event&lt;/code&gt; interface is defined in
&lt;a href=&#34;https://github.com/ArcticNature/core/blob/master/model/event/include/core/model/event.h&#34;&gt;https://github.com/ArcticNature/core/blob/master/model/event/include/core/model/event.h&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;sharing-state&#34;&gt;Sharing state&lt;/h2&gt;

&lt;p&gt;Events can be given parameters when they are created by the event source
that creates them but they cannot otherwise interact with future events.&lt;/p&gt;

&lt;p&gt;This means that an event generated as a response to another event cannot
access the context in which the original event was created.&lt;/p&gt;

&lt;p&gt;For example, the &lt;code&gt;snow-fox-client&lt;/code&gt; provides the &lt;code&gt;node.status()&lt;/code&gt; method.
Here is what happens when the user calls this method:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The client returns a pending response to the user.&lt;/li&gt;
&lt;li&gt;The client sends a request to the SnowFox node serving it.&lt;/li&gt;
&lt;li&gt;The node processes the request and determines the state.&lt;/li&gt;
&lt;li&gt;The node sends the state back to the client.&lt;/li&gt;
&lt;li&gt;The client processes the response and resolves the pending response.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But how does the client know which pending response to resolve?
While &lt;code&gt;Event&lt;/code&gt; instances represent independent events across the system,
they are related to one another as they aim to acomplish the same goal.&lt;/p&gt;

&lt;p&gt;Events that relate to one another share the same &lt;code&gt;correlation_id&lt;/code&gt;.
When the client receives a status response, it can use the &lt;code&gt;correlation_id&lt;/code&gt;
to figure out which past event triggered the request.&lt;/p&gt;

&lt;p&gt;But that on its own is still not enough to store context.
The &lt;code&gt;sf::core::model::EventContext&lt;/code&gt; template is here to do the rest.
Concrete &lt;code&gt;EventContext&lt;/code&gt;s are maps from &lt;code&gt;correlation_id&lt;/code&gt;s to contexts.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Representing status</title>
      <link>https://arcticnature.github.io/references/advanced/status/</link>
      <pubDate>Sat, 09 Apr 2016 09:38:16 +0100</pubDate>
      
      <guid>https://arcticnature.github.io/references/advanced/status/</guid>
      <description>&lt;p&gt;SnowFox keeps track not only of itself but also the services it
runs, depends on, or other items defined by extensions.
To avoid users/admins insanity, all these status information is
presented in a consistent way.&lt;/p&gt;

&lt;p&gt;Status information is formed of two bits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Traffic light overview:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Red: the unit is confirmed to be in an undesired state
(failed process, invalid configuration, &amp;hellip;).&lt;/li&gt;
&lt;li&gt;Yellow: the unit is not in the desired state but that may not
be an issue (system starting, configuration loading, &amp;hellip;).&lt;/li&gt;
&lt;li&gt;Green: the unit is in the desired state.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Status details:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An exact status code for the unit.&lt;/li&gt;
&lt;li&gt;A human readable message with the reason for the status.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This format allows to quickly check the overall system and to derive
aggregate status overviews while keeping the details needed to react
to issue in the system itself.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>